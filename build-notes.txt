Solution and project files are in Visual C# 2008 format.

The C# language version used is 3 and the .NET version targeted is 3.5

You must have Python (http://www.python.org/) and Subversion (http://subversion.tigris.org/servlets/ProjectDocumentList?folderID=8100) installed to properly build DFO Control Panel, in addition to a C# compiler. TortoiseSVN is not sufficient, you must have the svn command line tools intalled. A pre-build Python script is used to insert the the last changed SVN revision of each project into the 4th part of the version number.

DFOCP and any other application or library that uses Dfo.Controlling.dll must be compiled against the x86 platform, not Any CPU. The option to use Any CPU has been removed in the solution file but if you use an alternate method of compiling or use Dfo.Controlling.dll in your own application, you should know that. The reason for this limitation is that on 64-bit versions of windows, 32-bit applications like DFO get their registry calls for keys in HKEY_LOCAL_MACHINE\SOFTWARE\ to HKEY_LOCAL_MACHINE\SOFTWARE\Wow6432Node\. DFOCP runs as a 64-bit application on 64-bit Windows with a 64-bit CLR installed if it is compiled as Any CPU and therefore is not subject to the redirection. Dfo.Controlling contains a function to autodetect the DFO directory that reads the DFO directory from a registry key in that part of the registry. I chose the method of forcing to run as a 32-bit application rather than testing 32-bit vs. 64-bit at runtime and deciding the registry path based on that because it meant the code did not have to be changed and may avoid further gotchas.